name: Fuzz Testing

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:     # Allow manual trigger
  pull_request:
    paths:
      - 'vcdiff/**'
      - 'tests/**'
      - 'fuzz_*.py'

jobs:
  fuzz-hypothesis:
    name: Property-based Fuzzing (Hypothesis)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install hypothesis pytest pytest-cov
        pip install -e .
    
    - name: Run Hypothesis fuzzing
      run: |
        pytest tests/test_fuzz_hypothesis.py -v --tb=short
      timeout-minutes: 30
    
    - name: Upload coverage reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: hypothesis-coverage
        path: htmlcov/

  fuzz-simple:
    name: Simple Mutation Fuzzing
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -e .
    
    - name: Run simple fuzzing
      run: |
        # Run for 5 minutes
        python fuzz_simple.py 300
      timeout-minutes: 10
    
    - name: Upload fuzz findings
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: simple-fuzz-findings
        path: fuzz_findings/

  fuzz-atheris:
    name: Coverage-guided Fuzzing (Atheris)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install atheris
        pip install -e .
    
    - name: Run Atheris fuzzing
      run: |
        # Run for 10 minutes
        python fuzz_atheris.py -max_total_time=600 -print_final_stats=1
      timeout-minutes: 15
      continue-on-error: true  # Don't fail CI if fuzzer finds issues
    
    - name: Upload Atheris findings
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: atheris-findings
        path: |
          crash-*
          leak-*
          timeout-*

  fuzz-regression:
    name: Regression Testing
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -e .
    
    - name: Test known fuzzing findings
      run: |
        python -c "
        import vcdiff
        from vcdiff.exceptions import VCDIFFError
        
        # Test the varint overflow case we found
        import io
        from vcdiff.varint import read_varint
        
        try:
            result = read_varint(io.BytesIO(b'\x90\x80\x80\x80\x00'))
            raise AssertionError(f'Expected VCDIFFError but got result: {result}')
        except VCDIFFError:
            print('✓ Varint overflow protection working')
        
        # Add more regression tests as they are discovered
        print('All regression tests passed')
        "

  fuzz-compatibility:
    name: Cross-implementation Fuzzing
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -e .
    
    - name: Build Go implementation
      run: |
        # Clone or copy the Go implementation for comparison
        # This assumes the Go implementation is available
        if [ ! -d "../vcdiff-go" ]; then
          echo "Go implementation not found, skipping compatibility test"
          exit 0
        fi
        cd ../vcdiff-go && go build ./cmd/vcdiff
    
    - name: Run compatibility fuzzing
      run: |
        python -c "
        # Test that both implementations handle the same test cases consistently
        import subprocess
        import sys
        from pathlib import Path
        import vcdiff
        from vcdiff.exceptions import VCDIFFError
        
        test_cases = Path('submodules/vcdiff-tests/general-positive').glob('*/') if Path('submodules/vcdiff-tests/general-positive').exists() else []
        
        compatible_count = 0
        for test_case in list(test_cases)[:5]:  # Test first 5 cases
            if not test_case.is_dir():
                continue
                
            try:
                source = (test_case / 'source').read_bytes()
                target = (test_case / 'target').read_bytes()
                delta = (test_case / 'delta.vcdiff').read_bytes()
                
                # Test Python implementation
                py_result = vcdiff.decode(source, delta)
                
                if py_result == target:
                    compatible_count += 1
                    print(f'✓ {test_case.name}')
                else:
                    print(f'✗ {test_case.name}: Python result differs from expected')
                    
            except VCDIFFError as e:
                print(f'? {test_case.name}: VCDIFFError: {e}')
            except Exception as e:
                print(f'✗ {test_case.name}: Unexpected error: {e}')
        
        print(f'Compatible test cases: {compatible_count}')
        "
      continue-on-error: true